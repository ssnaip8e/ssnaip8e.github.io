// Терминал //   style(css/html): fix formatting in html/css

git clone
git status
git add
git commit -m “fix:all formatting #“
    file change     folder addition
git push

git init
git branch
git merge
git checkout

git help

https://github.com/ssnaip8e/Draft.git

Теперь, когда у вас есть свой аккаунт, нужно залогиниться в самой консоли, чтобы связать их. Для этого понадобится выполнить команды в
консоли, которые зада"пше дут имя пользователя и почтовый ящик.
// git config --global user.name "user-name"
// git config --global user.email email@example.com (mailto:email@example.com)
Вместо (user-name) подставьте логин, который указывали при регистрации.
(mailto:email@example.com) — адрес вашей электронной почты.

Если вы всё сделали по инструкции, то при выполнении команды 
// git config --list 
отобразится ваше имя пользователя

Github предлагает несколько вариантов создания проекта:
1.клонировать папку по выбранному протоколу;
2.создать проект с нуля — сегодня мы рассмотрим именно этот способ;
3.опубликовать уже созданный проект; 
4.скопировать проект.

// git checkout -b feature/(название ветки) - Создание ветки лучше делать через терминал
// git push --set-upstream origin (ветка) - Измененный файл заново переотправить


// git init — инициализирует проект. После инициализации создаётся специальная скрытая папка для Git
// git add README.md — добавляет изменённые файлы к коммиту. Также это можно сделать при помощи команды 
// git add . — в таком случае вы
добавите не конкретные файлы, а все изменённые, если их много
// git status - поможет проверить, что происходит с изменёнными файлами.
// git commit -m "first commit" - добавляет сообщение к коммиту — то, что будет отображаться в истории. В скобках можно указать любой текст. Как
правило, в нём кратко описывают, что делали в коммите.
// git log  - показывает историю коммитов
// git branch  - позволяет просмотреть ветки (. Но с 2020 года GitHub выступает за то, чтобы
главная ветка называлась main (по политическим причинам) и рекомендует переименовать ветку с помощью команды git branch -M main.)
// а git remote add origin https://github.com/test-github-04/test-github.git (https://github.com/test-github-04/test-github.git) добавляет сервер, где
origin — это имя сервера, а url — это адрес.
У вас может быть несколько удалённых серверов, с которыми работает проект. Проверить добавленные сервера можно командой git remote -v
(fetch — откуда забирать, push — куда отправлять изменения).
// git push -u origin main - позволяет запушить (отправить) ветку main на сервер origin. Тут вам, скорее всего, потребуется связать приложение и GitHub, повторно залогинившись через браузер.



git commit -m“fix:all formatting“



usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one
// запустить рабочую область (см. также: учебник git help)
   clone Клонирование репозитория в новый каталог
   init Создание пустого Git-репозитория или повторная инициализация существующего репозитория


work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index
// работать над текущим изменением (см. также: git help everyday)
   add Добавить содержимое файла в индекс
   mv Переместить или переименовать файл, каталог или симлинк
   restore Восстановить файлы рабочего дерева
   rm Удалить файлы из рабочего дерева и из индекса


examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG
// развивайте, отмечайте и корректируйте свою общую историю
   ветвь Перечислять, создавать или удалять ветви
   commit Запись изменений в репозиторий
   объединить Объединить две или более истории разработки вместе
   rebase Переназначить коммиты поверх другого базового наконечника
   reset Сбросить текущий HEAD в указанное состояние
   switch Переключить ветки
   tag Создать, перечислить, удалить или проверить объект тега, подписанный GPG

Переведено с помощью www.DeepL.com/Translator (бесплатная версия)

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects
// сотрудничать (см. также: рабочие процессы git help)
   fetch Загрузка объектов и ссылок из другого хранилища
   pull Извлечение из другого хранилища или локальной ветки и интеграция с ними
   push Обновление удаленных ссылок вместе со связанными с ними объектами

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
// В 'git help -a' и 'git help -g' перечислены доступные подкоманды и некоторые
руководства по концепциям. Смотрите 'git help <команда>' или 'git help <концепция>'
чтобы прочитать о конкретной подкоманде или концепции.
См. 'git help git' для обзора системы.


